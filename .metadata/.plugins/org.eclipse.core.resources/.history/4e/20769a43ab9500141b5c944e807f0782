package rulePack;

import java.util.Iterator;

import com.sun.java.util.jar.pack.Package.Class.Method;

import controller.clFeed;

public class clGenerateRuleConditions {
	
	private static String classFeed;
	private static String ruleName;
	private static clFeed feedObj = null;
//	static String[] preSelConds;
	
	
	public static void main(String[] args) {
		clGenerateRuleConditions ruleCond = new clGenerateRuleConditions("clRuleHasClassName");
		
//		feedObj = new clFeed(classFeed);
//		ruleCond.extractConditions(ruleName, feedObj);
		if (feedObj.isCooked() == true){
			ruleCond.extractConditions(ruleName, feedObj);
		}
	}
	
	public clGenerateRuleConditions(String cond){
		initialize(cond);
		
		//cook the feed: 
		//			  1. Capture syntax errors (?)
		//			  2. Cook for rules extractions
		cookFeed();
		
		
	}
	
	public void extractConditions(String ruleName, clFeed feed){
		
		switch( ruleName){
			case "clRuleHasClassName":
				feedObj.getClass().getName();
				break;
			
			case "clRuleHasMethodName":
				//cater scenario of multiple methods
				Class cls = feedObj.getClass();
				Method[] mtds = cls.getMethods();
			
		}
		return;
	}
	
	private static void initialize(String preSelCond){
		String HALLO_WORLD_SOURCE = "public class Guitar"
				+ "{\n"
				+ "      int price;\n	"
				+ "		 public static String run() {\n"
				+ "        return \"run sucessfully...\";\n" + "    }\n" + "}";
		
		classFeed = HALLO_WORLD_SOURCE;
		ruleName = preSelCond;		
	/*	preSelCond = new String[20];
		preSelCond[0] = "clRuleHasClassName";
		preSelCond[1] = "clRuleHasMethodName";*/
	}
	
	private static void cookFeed(){
		feedObj = new clFeed(classFeed);
		feedObj.cookFeed();
	}
}
